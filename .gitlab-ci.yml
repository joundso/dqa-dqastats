variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  CI_IMAGE_NAME: "docker.miracum.org/dqa/base_image:development"
  R_PKG_NAME: "DQAstats"
  DOCKER_REGISTRY: "docker.miracum.org"

# Example gitlab-ci for testing R packages: 
# https://gist.github.com/artemklevtsov/785ed0472c167246e947a75216852e10

.docker_registry:
  before_script:
    - apk add git
    - echo ${REGISTRY_PASSWORD} | docker login -u ${REGISTRY_USERNAME} ${DOCKER_REGISTRY} --password-stdin
  after_script:
    - docker logout ${DOCKER_REGISTRY}


default:
  image: ${CI_IMAGE_NAME}
  extends: .docker_registry
  before_script:
    - echo ".git" > .dockerignore  # Don't upload the git-folder to the context
    - mkdir -p ci

stages:
  - build
  - deploy

check:
  stage: build
  allow_failure: true # necessary when having development-packages (in remotes-section of DESCRIPTION)
  script:
    - R -e "rcmdcheck::rcmdcheck(path = '.', args = c('--no-tests', '--no-vignettes', '--as-cran'), build_args = c('--no-build-vignettes'), check_dir = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.Rcheck"
    when: on_failure # upload check artifacts when job fails!
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

create_manual:
  stage: build
  allow_failure: true
  script:
    - R -e "devtools::build_manual(pkg = '.', path = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.pdf"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

build_source_and_binary:
  stage: build
  script:
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = FALSE, vignettes = FALSE)"
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = TRUE, vignettes = FALSE)"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.tar.gz"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+


testing:
  stage: build
  script:
    - R -e "devtools::test(pkg = '.')"
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

install:
  stage: deploy
  script:
    - R -e "devtools::install(pkg = '.', upgrade = 'always')"
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development
